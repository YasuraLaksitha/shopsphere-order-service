spring:
  application:
    name: orders
  config:
    import: "optional:configserver:http://localhost:8070"
  data:
    redis:
      host: localhost
      port: 6379
  datasource:
    url: jdbc:h2:mem:test_db
    username: sa
    password: ''
    driver-class-name: org.h2.Driver
  jpa:
    hibernate:
      ddl-auto: create
    show-sql: true
  cloud:
    stream:
      bindings:
        productUpdate-out-0:
          destination: send-productUpdate
      kafka:
        binder:
          broker:
            - localhost:9092

eureka:
  instance:
    prefer-ip-address: true
  client:
    service-url:
      defaultZone: http://localhost:8071/eureka

management:
  endpoints:
    web:
      exposure:
        include: '*'
  health:
    readiness-state:
      enabled: true
    liveness-state:
      enabled: true
  endpoint:
    probes:
      health:
        enabled: true

resilience4j.circuitbreaker:
  instances:
    stripeService:
      slidingType: COUNT_BASED
      slidingWindowSize: 20
      failureRateThreshold: 10
      waitDurationInOpenState: 10s
      permittedNumberOfCallsInHalfOpenState: 3
    shippingService:
      slidingType: COUNT_BASED
      slidingWindowSize: 10
      failureRateThreshold: 5
      waitDurationInOpenState: 10s
      permittedNumberOfCallsInHalfOpenState: 3

resilience4j.timelimiter:
  instances:
    stripeService:
      timeoutDuration: 5s
      cancelRunningFuture: false

resilience4j.retry:
  instances:
    stripeService:
      maxAttempts: 4
      waitDuration: 2s
      enableExponentialBackoff: true
      exponentialBackoffMultiplier: 2
      retryExceptions:
        - java.lang.Exception
